{"version":3,"sources":["MyControlledForm.jsx","serviceWorker.js","index.js"],"names":["MyControlledForm","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","submitForm","console","log","myInput","value","mySelect","myTextarea","myCheckbox","alert","inherits","createClass","key","_this2","react_default","a","createElement","type","name","ref","input","defaultValue","select","textarea","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","MyControlledForm_MyControlledForm","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAEaA,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAJ,IAAAe,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MAEIQ,WAAa,WACTC,QAAQC,IAAI,0BACZD,QAAQC,IAAI,iBAAkBjB,EAAKkB,QAAQC,OAC3CH,QAAQC,IAAI,kBAAmBjB,EAAKoB,SAASD,OAC7CH,QAAQC,IAAI,oBAAqBjB,EAAKqB,WAAWF,OACjDH,QAAQC,IAAI,oBAAqBjB,EAAKsB,WAAWH,OACjDH,QAAQC,MAERM,MAAM,yCACYvB,EAAKkB,QAAQC,MAAQ,qBACpBnB,EAAKoB,SAASD,MAAQ,uBACpBnB,EAAKqB,WAAWF,MAAQ,uBACxBnB,EAAKsB,WAAWH,QAd7CnB,EAAA,OAAAC,OAAAuB,EAAA,EAAAvB,CAAAJ,EAAAC,GAAAG,OAAAwB,EAAA,EAAAxB,CAAAJ,EAAA,EAAA6B,IAAA,SAAAP,MAAA,WAiBa,IAAAQ,EAAAxB,KACL,OACIyB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,OAAOC,KAAK,OAAOC,IAAK,SAAAC,GAAK,OAAIP,EAAKT,QAAUgB,KAASN,EAAAC,EAAAC,cAAA,WACrEF,EAAAC,EAAAC,cAAA,UAAQE,KAAK,QAAQG,aAAa,OAAQF,IAAK,SAAAG,GAAM,OAAIT,EAAKP,SAAWgB,IACrER,EAAAC,EAAAC,cAAA,UAAQX,MAAM,OAAd,YACAS,EAAAC,EAAAC,cAAA,UAAQX,MAAM,QAAd,aACAS,EAAAC,EAAAC,cAAA,UAAQX,MAAM,SAAd,YACKS,EAAAC,EAAAC,cAAA,WACTF,EAAAC,EAAAC,cAAA,YAAUE,KAAK,UAAUC,IAAK,SAAAI,GAAQ,OAAIV,EAAKN,WAAagB,KAAaT,EAAAC,EAAAC,cAAA,WACzEF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,WAAWC,KAAK,YAAYC,IAAK,SAAAC,GAAK,OAAIP,EAAKL,WAAaY,MACpEN,EAAAC,EAAAC,cAAA,WACRF,EAAAC,EAAAC,cAAA,UAAQQ,QAASnC,KAAKY,YAAtB,eA9BhBlB,EAAA,CAAsC0C,IAAMC,WCUxBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAQnB,EAAAC,EAAAC,cAACkB,EAAD,MAAuBC,SAASC,eAAe,SD0H1D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c418f5be.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport class MyControlledForm extends React.Component {\r\n    \r\n    submitForm = () => {\r\n        console.log('Wartości pól: ');\r\n        console.log('- pole input: '+ this.myInput.value);\r\n        console.log('- pole select: '+ this.mySelect.value);\r\n        console.log('- pole textarea: '+ this.myTextarea.value);\r\n        console.log('- pole checkbox: '+ this.myCheckbox.value);\r\n        console.log();\r\n\r\n        alert('Wartości pól: \\n'+\r\n        '- pole input: '+ this.myInput.value + ' \\n'+\r\n        '- pole select: '+ this.mySelect.value + ' \\n'+\r\n        '- pole textarea: '+ this.myTextarea.value + ' \\n'+\r\n        '- pole checkbox: '+ this.myCheckbox.value);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <input type='text' name='name' ref={input => this.myInput = input} /><br/>\r\n                <select name=\"color\" defaultValue=\"blue\"  ref={select => this.mySelect = select}>\r\n                    <option value=\"red\">Czerwony</option>\r\n                    <option value=\"blue\">Niebieski</option>\r\n                    <option value=\"green\">Zielony</option>\r\n                </select><br/>\r\n                <textarea name=\"message\" ref={textarea => this.myTextarea = textarea}  /><br/>\r\n                <label>\r\n                    <input type=\"checkbox\" name=\"isChecked\" ref={input => this.myCheckbox = input} />\r\n                </label><br/>\r\n                <button onClick={this.submitForm}>Submit</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import { App } from './App';\r\nimport { MyControlledForm  } from './MyControlledForm';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render( <MyControlledForm /> , document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}